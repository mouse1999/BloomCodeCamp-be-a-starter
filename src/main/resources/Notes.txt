i should implement a claim assignment manager that takes a submitted assignment out of the submitted queue
so that any other reviewer cant claim that same assignment untill all the  assignments are exhausted for review

PLAN
=====

if an assignment nummber already exist or taken...through an exception



openapi: 3.0.0
info:
  title: FOOD DELIVERY API
  description: This API connects customers with their preferred restaurants, allowing restaurants to manage their menus and customers to browse and place orders for food delivery. Restaurants can add menu items without authentication, and customers can easily explore restaurant options and make orders. The API is designed for efficient food delivery order management and processing.
  version: 1.0.0

paths:
  /users :
    post:
      summary: Allow new users to create an account
      description: New users creates an account.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/User"

        '400':
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'


  /users/{userId} :
    put:
      summary: update an account information
      description: This allow old users to update thier own information
      parameters:
        - name: userId
          in: path
          description: Restaurant ID
          required: true
          schema:
            type: string
      requestBody:
        description: Required fields that can be updated.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                quantity:
                  type: integer
                address:
                  type: string

              example: {
                name: "oldName",
                quantity: 5,
                address: "my location"
              }


      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/User"
                example: {
                name: "newName",
                quantity: 8,
                address: "my new location"
              }
        '400':
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 400,
                  error: "Bad Request",
                  message: "Invalid request payload"

                }


        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 404,
                  error: "Not Found",
                   message: "User with ID '12345' not found."

                }


    delete:
      summary: Allow users to delete his/her account
      description: This endpoint is used to delete an account by a user
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 404,
                  error: "Not Found",
                   message: "User with ID '12345' not found."

                }

  /restaurants:
    post:
      summary: Allow new restaurant owners to create an account.
      description: New restaurant owners creates an account.

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Restaurant"

        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }





    get:
      summary: Get list of all the restaurants.
      description: This endpoint helps to get a list of all registered restaurant
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }

  /restaurants/{restaurantId}/menus:
    get:
      summary: Retrieves menus for a specific restaurant.
      description: This endpoint gets menu from a restaurant.
      parameters:
        - name: restaurantId
          in: path
          description: Restaurant ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Menu"
        '404':
          description: restaurant not found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 404,
                  error: "Not Found",
                   message: "Restaurant with ID '12345' not found."

                }
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }
    post:
      summary: add new menu to a restaurant.
      description: ""
      parameters:
        - name: restaurantId
          in: path
          description: Restaurant ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Menu"
        '404':
          description: restaurant not found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 404,
                  error: "Not Found",
                   message: "Restaurant with ID '12345' not found."

                }
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }
    delete:
      summary: Allow restaurant owner to delete or remove all menus.
      description: This is used when the owner of a restaurant wants to delete all the menu created for his/her restaurant
      parameters:
        - name: restaurantId
          in: path
          description: Restaurant ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: { message: "All menu successfuly deleted"

                    }
        '404':
          description: restaurant not found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 404,
                  error: "Not Found",
                   message: "Restaurant with ID '12345' not found."

                }
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }


  /restaurants/{restaurantId}/menus/search:
    get:
      summary: Search for food by name or price in a restaurant's menu.
      description: This endpoint allows users to search for specific food items by name or price within a restaurant's menu.
      parameters:
        - name: restaurantId
          in: path
          description: The ID of the restaurant whose menu is being searched.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: The name of the food item to search for (optional).
          required: false
          schema:
            type: string
        - name: price
          in: query
          description: The price of the food item to search for (optional).
          required: false
          schema:
            type: number
            format: float
      responses:
        '200':
          description: Successful search.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Food"
        '400':
          description: Bad Request. Invalid query parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                status: 400
                error: "Bad Request"
                message: "Invalid query parameter: 'price' should be a number."
        '404':
          description: Not Found. The restaurant or the food item could not be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                status: 404
                error: "Not Found"
                message: "No food items matching the search criteria found."




  /restaurants/menus:
    get:
      summary: Retrieves list of menus for all registered restaurant.
      description: ""
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Menu"
        '401':
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 401,
                  error: "Unauthorize access",
                   message: "Restaurant with ID '12345' not authorized "

                }
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }
  /users/{userId}/orders :
    post:
      summary: Allow user to place an order
      description: This endpoint allows a valid user of the application to place an order from a menu in a specific restaurant.
      parameters:
        - name: userId
          in: path
          description: user ID
          required: true
          schema:
            type: string
      requestBody:
        description: Required fields to place an order.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - restaurantId
                - quantity
                - deliveryAddress
                - foodItems
              properties:
                userId:
                  type: string
                restaurantId:
                  type: string
                quantity:
                  type: integer
                deliveryAddress:
                  type: string
                foodItems:
                  type: array
                  items:
                    $ref: "#/components/schemas/Food"

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  orderId:
                    type: string
                required:
                  - orderId
        '400':
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 400,
                  error: "Bad Request",
                  message: "Invalid request payload"

                }
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 404,
                  error: "Not Found",
                   message: "User with ID '12345' not found."

                }
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }

    get:
      summary: "Get list of all orders made by a user"
      description: This is used to get all orders made by a user of the system.
      parameters:
        - name: userId
          in: path
          description: user ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 404,
                  error: "Not Found",
                   message: "User with ID '12345' not found."

                }
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }

  /users/{userId}/orders/{orderId}:
    get:
      summary: "Get an order made by a user using an order Id"
      description: This is used to get a specific order made by a user of the system.
      parameters:
        - name: userId
          in: path
          description: user ID
          required: true
          schema:
            type: string
        - name: orderId
          in: path
          description: Order Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 404,
                  error: "Not Found",
                   message: "Order with ID '12345' not found."

                }
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }
    put:
      summary: "Allow user to cancel an order"
      description: This is used to cancel an order by updating the status of the order.
      parameters:
        - name: userId
          in: path
          description: user ID
          required: true
          schema:
            type: string
        - name: orderId
          in: path
          description: Order Id
          required: true
          schema:
            type: string
      requestBody:
        description: This used to update the status to canceled.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: string
                  status:
                    type: string
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 404,
                  error: "Not Found",
                   message: "Order with ID '12345' not found."

                }
        '400':
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 400,
                  error: "Bad Request",
                  message: "Invalid request payload"

                }
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }



  /restaurants/{restaurantId}/orders :
    get:
      summary: Allow a specific restaurant to retrieve list of orders made by users
      description: This is used by the restaurant to get a list of all the order made by its customers
      parameters:
        - name: restaurantId
          in: path
          description: restaurant ID
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
                example: {
                  status: 404,
                  error: "Not Found",
                   message: "Restaurant with ID '12345' not found."

                }
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorResponse'
              example: {
                 status: 500,
                 error: "Internal Server Error",
                 message: "An unexpected error occurred on the server. Please try again later."
              }









components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        address:
          type: integer
    Restaurant:
      type: object
      properties:
        restaurantId:
          type: string
        name:
          type: string
        Address:
          type: string
    Menu:
      type: object
      properties:
        menuId:
          type: string
        description:
          type: string
        createdDate:
          type: string
        foodList:
          type: array
          items:
            $ref: "#/components/schemas/Food"




    Food:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        category:
          type: string

    Order:
      type: object
      properties:
        orderId:
          type: string
        userId:
          type: string
        restaurantId:
          type: string
        totalPrice:
          type: integer
        status:
          type: string
        orderDate:
          type: string
        foodItem:
          type: array
          items:
            $ref: "#/components/schemas/Food"





    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
        error:
          type: string
        message:
          type: string




import React, { useState } from 'react';

// Assume this data comes from an API call or is static as shown above
const initialAssignmentOptions = [
  { assignmentNumber: 1, assignmentName: "Spring Boot Service" },
  { assignmentNumber: 2, assignmentName: "Spring Boot Data JPA" },
  { assignmentNumber: 3, assignmentName: "Spring Boot Postgresql" },
  { assignmentNumber: 4, assignmentName: "Docker Compose Setup" },
  { assignmentNumber: 5, assignmentName: "React Frontend Hooks" },
  { assignmentNumber: 6, assignmentName: "Python Problems" },
  { assignmentNumber: 7, assignmentName: "Assembly Boot Sector Hello World" },
  { assignmentNumber: 8, assignmentName: "CTF Buffer Overflow" },
  { assignmentNumber: 9, assignmentName: "Docker Build" },
  { assignmentNumber: 10, assignmentName: "aws buckets" },
  { assignmentNumber: 11, assignmentName: "hashmaps and sets" },
  { assignmentNumber: 12, assignmentName: "computational counting" },
  { assignmentNumber: 13, assignmentName: "data driven websites" },
  { assignmentNumber: 14, assignmentName: "SQL Reporting" },
];

function AssignmentDropdown() {
  // State to hold the currently selected assignment number
  const [selectedAssignmentNumber, setSelectedAssignmentNumber] = useState('');
  // State to hold the displayed name (optional, for confirmation)
  const [selectedAssignmentName, setSelectedAssignmentName] = useState('');

  const handleAssignmentChange = (event) => {
    const number = event.target.value; // This is the assignmentNumber because of <option value={...}>
    setSelectedAssignmentNumber(number);

    // If you also need the name that was displayed, you can find it:
    const selectedOption = initialAssignmentOptions.find(
      (option) => String(option.assignmentNumber) === number // Compare as strings as event.target.value is always a string
    );
    setSelectedAssignmentName(selectedOption ? selectedOption.assignmentName : '');

    // Now you have the 'number' (assignmentNumber) and can use it for your logic
    console.log('Selected Assignment Number:', number);
    console.log('Selected Assignment Name:', selectedOption ? selectedOption.assignmentName : 'N/A');

    // Example: You might pass this 'number' to a parent component or dispatch an action
    // onSelectAssignment(number);
  };

  return (
    <div>
      <label htmlFor="assignment-select">Select an Assignment:</label>
      <select
        id="assignment-select"
        value={selectedAssignmentNumber} // Controlled component: binds select value to state
        onChange={handleAssignmentChange}
      >
        <option value="">-- Please choose an assignment --</option> {/* Default empty option */}
        {initialAssignmentOptions.map((assignment) => (
          <option key={assignment.assignmentNumber} value={assignment.assignmentNumber}>
            {assignment.assignmentName}
          </option>
        ))}
      </select>

      {selectedAssignmentNumber && (
        <p>
          You selected: <strong>{selectedAssignmentName}</strong> (Number: {selectedAssignmentNumber})
        </p>
      )}
    </div>
  );
}

export default AssignmentDropdown;