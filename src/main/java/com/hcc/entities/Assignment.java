package com.hcc.entities;

import com.hcc.enums.AssignmentEnum;
import com.hcc.enums.AssignmentStatusEnum;

import javax.persistence.*;
import java.util.Objects;

import javax.persistence.*;
import java.time.Instant;
import java.util.Objects;
import java.util.Optional;

@Entity
@Table(name = "assignmentsTable")
public class Assignment {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private final Long id;  // Required, generated by DB

    @Column(nullable = false, updatable = false)
    private final Instant createdAt = Instant.now();  // Auto-set on creation

    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private AssignmentStatusEnum status = AssignmentStatusEnum.PENDING_SUBMISSION;

    @Column(nullable = false)
    private final Integer assignmentNumber;  // Required

    @Column(name = "github_url")
    private String githubUrl;

    private String branch;

    @Column(name = "review_video_url")
    private String reviewVideoUrl;

    private Instant reviewedAt;  // Nullable until review

    @Enumerated(EnumType.STRING)
    @Column(name = "status")
    private final AssignmentEnum assignmentEnum ;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private final User user;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "reviewer_id")
    private User codeReviewer;

    // JPA-required constructor
    public Assignment() {
        this.id = null;
        this.assignmentNumber = null;
        this.user = null;
        assignmentEnum = null;
    }

    // Builder constructor
    private Assignment(Builder builder) {
        this.id = null;  // Let JPA generate ID
        this.status = builder.status;
        this.assignmentNumber = builder.assignmentNumber;
        this.githubUrl = builder.githubUrl;
        this.branch = builder.branch;
        this.reviewVideoUrl = builder.reviewVideoUrl;
        this.user = builder.user;
        this.codeReviewer = builder.codeReviewer;
        this.assignmentEnum = builder.assignmentEnum;

    }

    // === Getters ===
    public Long getId() { return id; }
    public Instant getCreatedAt() { return createdAt; }
    public AssignmentStatusEnum getStatus() { return status; }

    public AssignmentEnum getAssignmentEnum() {
        return assignmentEnum;
    }

    public Integer getAssignmentNumber() {
        return assignmentNumber;
    }

    public Optional<String> getGithubUrl() { return Optional.ofNullable(githubUrl); }
    public Optional<String> getBranch() { return Optional.of(branch); }
    public Optional<String> getReviewVideoUrl() { return Optional.ofNullable(reviewVideoUrl); }
    public Optional<Instant> getReviewedAt() { return Optional.ofNullable(reviewedAt); }
    public User getUser() { return user; }
    public Optional<User> getCodeReviewer() { return Optional.ofNullable(codeReviewer); }


    public void setStatus(AssignmentStatusEnum status) {
        this.status = Objects.requireNonNull(status);
    }

    public void setGithubUrl(String githubUrl) {
        this.githubUrl = githubUrl;
    }

    public void setBranch(String branch) {
        this.branch = branch;
    }

    public void setReviewDetails(String videoUrl, Instant reviewedAt) {
        this.reviewVideoUrl = videoUrl;
        this.reviewedAt = reviewedAt;
    }

    public void setCodeReviewer(User codeReviewer) {
        this.codeReviewer = codeReviewer;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static final class Builder {
        private AssignmentStatusEnum status;
        private AssignmentEnum assignmentEnum;
        private Integer assignmentNumber;
        private String githubUrl;
        private String branch;
        private String reviewVideoUrl;
        private User user;
        private User codeReviewer;


        public Builder status(AssignmentStatusEnum status) {
            this.status = status;
            return this;
        }

        public Builder assignmentEnum(AssignmentEnum assignmentEnum) {
            this.assignmentEnum = assignmentEnum;
            return this;
        }

        public Builder assignmentNumber(Integer assignmentNumber) {
            this.assignmentNumber = Objects.requireNonNull(assignmentNumber);
            return this;
        }

        public Builder githubUrl(String githubUrl) {
            this.githubUrl = githubUrl;
            return this;
        }

        public Builder branch(String branch) {
            this.branch = branch;
            return this;
        }

        public Builder reviewVideoUrl(String reviewVideoUrl) {
            this.reviewVideoUrl = reviewVideoUrl;
            return this;
        }

        public Builder user(User user) {
            this.user = Objects.requireNonNull(user);
            return this;
        }

        public Builder codeReviewer(User codeReviewer) {
            this.codeReviewer = codeReviewer;
            return this;
        }


        public Assignment build() {
            return new Assignment(this);
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Assignment that = (Assignment) o;
        return Objects.equals(getId(), that.getId()) && Objects.equals(getCreatedAt(), that.getCreatedAt()) && Objects.equals(getAssignmentNumber(), that.getAssignmentNumber()) && Objects.equals(getUser(), that.getUser());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getCreatedAt(), getAssignmentNumber(), getUser());
    }

    @Override
    public String toString() {
        return "Assignment{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", status=" + status +
                ", assignmentNumber=" + assignmentNumber +
                ", githubUrl='" + githubUrl + '\'' +
                ", branch='" + branch + '\'' +
                ", reviewVideoUrl='" + reviewVideoUrl + '\'' +
                ", reviewedAt=" + reviewedAt +
                ", user=" + user +
                ", codeReviewer=" + codeReviewer +
                '}';
    }
}